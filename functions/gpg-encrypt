# -*- mode: sh; indent-tabs-mode: nil; tab-width: 4 -*-

# MIT License
#
# Copyright (c) 2016 Thiago Alves
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# # #
# Command to encrypt content.
#
# If no argument is gived, your $VISUAL/$EDITOR will edit a temp file that
# will be encrypted after you exit the editor.
#
# If a file name is given as the first argument, that file will be encrypted.
#
# Options:
#     -r|--recipient    The email used to encrypt the content. Defaults to the
#                       content of the $USER_EMAIL environment variable or my
#                       personal email.
#     -o|--output       A file name that will be used to store the encrypted
#                       content. Notice that if the file already exists, it will
#                       be overriten by this function. If this option is
#                       ommited, the encrypted content will be printed on the
#                       default output (/dev/stdout).
# #
function _gpg_encrypt {
    local recipient
    local output_file
    local cmd
    zparseopts -D -E -- r:=recipient -recipient:=recipient o:=output_file -output:=output_file
    local source_file=$1
    local remove_temp=0
    if [ "$recipient" = "" ]; then
        recipient="talk@thiagoalves.com.br"
    else
        recipient=$recipient[2]
    fi

    if [ $# -eq 0 ]; then
        source_file=$(mktemp)
        eval "${VISUAL:-${EDITOR:-vi}} $source_file"
        remove_temp=1
    fi

    cmd=$(whence gpg)
    if [ -e "$source_file" ]; then
        if [ "$output_file" != "" ]; then
            $cmd --encrypt --armor --recipient ${recipient} -o "${output_file[2]}.gpg" "$source_file"
        else
            $cmd --encrypt --armor --recipient ${recipient} < "$source_file"
        fi
        if [ $remove_temp -ne 0 ]; then
            rm -rf $source_file
        fi
    else
        if [ "$output_file" != "" ]; then
            echo "$@" | $cmd --encrypt --armor --recipient ${recipient} -o "${output_file[2]}"
        else
            echo "$@" | $cmd --encrypt --armor --recipient ${recipient}
        fi
    fi
}

_gpg_encrypt $@